// ***********************************************************************************
// Connect UsersLibrary
// 
// Copyright (C) 2013-2014 DNN-Connect Association, Philipp Becker
// http://dnn-connect.org
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// 
// ***********************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Text.RegularExpressions;
using System.Web.UI;
using System.Web.UI.WebControls;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Entities.Profile;
using DotNetNuke.Entities.Users;
using DotNetNuke.Framework;
using DotNetNuke.Services.Localization;
using DotNetNuke.UI.WebControls;
using DotNetNuke.Web.UI.WebControls;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Telerik.Web.UI;

namespace Connect.Libraries.UserManagement
{
    public class ConnectUsersModuleBase : PortalModuleBase
    {

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        protected enum UsernameUpdateMode
        {
            UserSelect, // user selects the username himself
            FirstLetterLastname, // username autogenerated, username = f.lastname
            FirstnameLastname, // username autogenerated, username = firstname.lastname
            Lastname, // username autogenerated, lastname = username
            Email // username autogenerated, email = username
        }

        protected enum DisplaynameUpdateMode
        {
            UserSelect, // user selects the displayname himself
            FirstLetterLastname, // autogenerated, (F.Lastname)
            FirstnameLastname, // autogenerated (Firstname Lastname)
            Lastname, // username autogenerated, (Lastname)
            Email // autogenerated, (email address)
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        protected bool CompareFirstNameLastName
        {
            get
            {
                if (Settings["CompareFirstNameLastName"] is object)
                {
                    return Conversions.ToBoolean(Settings["CompareFirstNameLastName"]);
                }

                return true;
            }
        }

        protected bool ValidateEmailThroughRegex
        {
            get
            {
                if (Settings["ValidateEmailThroughRegex"] is object)
                {
                    return Conversions.ToBoolean(Settings["ValidateEmailThroughRegex"]);
                }

                return true;
            }
        }

        protected string EmailRegex
        {
            get
            {
                if (Settings["EmailRegex"] is object)
                {
                    return Conversions.ToString(Settings["EmailRegex"]);
                }

                return Null.NullString;
            }
        }

        protected string[] AdditionalControls
        {
            get
            {
                var strControls = new string[] { };
                if (!string.IsNullOrWhiteSpace(Conversions.ToString(Settings["AdditionalControls"])))
                {
                    try
                    {
                        strControls = Convert.ToString(Settings["AdditionalControls"]).Split(char.Parse(";"));
                    }
                    catch
                    {
                    }
                }

                return strControls;
            }
        }

        protected string[] ExportFieldHeaders
        {
            get
            {
                var strPropArray = new string[] { };
                string strProps = "User_UserId,User_Username,User_Firstname,User_Lastname,User_Email,User_CreatedDate,User_LastLoginDate,";
                var props = ProfileController.GetPropertyDefinitionsByPortal(PortalSettings.PortalId);
                foreach (ProfilePropertyDefinition prop in props)
                {
                    if (!string.IsNullOrEmpty(Localization.GetString(prop.PropertyName, ProfileResourcefile)))
                    {
                        strProps += Localization.GetString(prop.PropertyName, ProfileResourcefile) + ",";
                    }
                    else
                    {
                        strProps += prop.PropertyName + ",";
                    }
                }

                if (Settings["ExportFields"] is object)
                {
                    if (!string.IsNullOrEmpty(Conversions.ToString(Settings["ExportFields"])))
                    {
                        strProps = "";
                        try
                        {
                            string strValue = Convert.ToString(Settings["ExportFields"]);
                            foreach (string sValue in strValue.Split(char.Parse(",")))
                            {
                                if (sValue.Trim().Length > 0)
                                {
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + sValue + ".Text", ProfileResourcefile)))
                                    {
                                        strProps += Localization.GetString("ProfileProperties_" + sValue + ".Text", ProfileResourcefile) + ",";
                                    }
                                    else
                                    {
                                        strProps += sValue + ",";
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                }

                return strProps.Split(char.Parse(","));
            }
        }

        protected string[] ExportFields
        {
            get
            {
                var strPropArray = new string[] { };
                string strProps = "User_UserId,User_Username,User_Firstname,User_Lastname,User_Email,User_CreatedDate,User_LastLoginDate,";
                var props = ProfileController.GetPropertyDefinitionsByPortal(PortalSettings.PortalId);
                foreach (ProfilePropertyDefinition prop in props)
                    strProps += prop.PropertyName + ",";
                if (Settings["ExportFields"] is object)
                {
                    try
                    {
                        string strValue = Convert.ToString(Settings["ExportFields"]);
                        if (strValue.Trim().Length > 0)
                        {
                            strPropArray = strValue.Split(char.Parse(","));
                        }
                    }
                    catch
                    {
                    }
                }

                if (strPropArray.Length > 0)
                {
                    return strPropArray;
                }

                return strProps.Split(char.Parse(","));
            }
        }

        protected string[] ShowUserDetailTabs
        {
            get
            {
                var strControls = new string[] { "Account", "Password", "Profile", "Roles", "Email", "Sites" };
                if (Settings["ShowUserDetailTabs"] is object)
                {
                    try
                    {
                        string strValue = Convert.ToString(Settings["ShowUserDetailTabs"]);
                        if (strValue.Length > 0)
                        {
                            strControls = strValue.Split(char.Parse(","));
                        }
                    }
                    catch
                    {
                    }
                }

                return strControls;
            }
        }

        protected bool LoginWithEmail
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["LoginWithEmail"])))
                {
                    return Conversions.ToBoolean(Settings["LoginWithEmail"]);
                }

                return true;
            }
        }

        protected int PreSelectRole
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["PreSelectRole"])))
                {
                    return Conversions.ToInteger(Settings["PreSelectRole"]);
                }

                return Null.NullInteger;
            }
        }

        protected bool AllowReports
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AllowReports"])))
                {
                    return Conversions.ToBoolean(Settings["AllowReports"]);
                }

                return true;
            }
        }

        protected string ExternalInterface
        {
            get
            {
                if (Settings["ExternalInterface"] is object)
                {
                    return Conversions.ToString(Settings["ExternalInterface"]);
                }

                return Null.NullString;
            }
        }

        protected string[] AllowedRoles
        {
            get
            {
                if (Settings["AllowedRoles"] is object)
                {
                    return Conversions.ToString(Settings["AllowedRoles"]).Split(char.Parse(";"));
                }

                return null;
            }
        }

        protected bool AllowExport
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AllowExport"])))
                {
                    return Conversions.ToBoolean(Settings["AllowExport"]);
                }

                return true;
            }
        }

        protected bool AllowEmailUsers
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AllowEmailUsers"])))
                {
                    return Conversions.ToBoolean(Settings["AllowEmailUsers"]);
                }

                return true;
            }
        }

        protected bool AllowMessageUsers
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AllowMessageUsers"])))
                {
                    return Conversions.ToBoolean(Settings["AllowMessageUsers"]);
                }

                return true;
            }
        }

        protected bool AllowCreate
        {
            get
            {
                if (DotNetNuke.Security.Membership.MembershipProvider.Instance().RequiresQuestionAndAnswer)
                {
                    return false;
                }

                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AllowCreate"])))
                {
                    return Conversions.ToBoolean(Settings["AllowCreate"]);
                }

                return false;
            }
        }

        protected bool AllowHardDelete
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AllowHardDelete"])))
                {
                    return Conversions.ToBoolean(Settings["AllowHardDelete"]);
                }

                return false;
            }
        }

        protected bool AllowDelete
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AllowDelete"])))
                {
                    return Conversions.ToBoolean(Settings["AllowDelete"]);
                }

                return false;
            }
        }

        protected UsernameUpdateMode UsernameMode
        {
            get
            {
                if (Settings["ShowUserName"] is object)
                {
                    switch (Conversions.ToString(Settings["ShowUserName"]) ?? "")
                    {
                        case "EMAIL":
                            {
                                return UsernameUpdateMode.Email;
                            }

                        case "FIRSTLETTER.LASTNAME":
                            {
                                return UsernameUpdateMode.FirstLetterLastname;
                            }

                        case "FIRSTNAME.LASTNAME":
                            {
                                return UsernameUpdateMode.FirstnameLastname;
                            }

                        case "LASTNAME":
                            {
                                return UsernameUpdateMode.Lastname;
                            }

                        default:
                            {
                                return UsernameUpdateMode.UserSelect;
                            }
                    }
                }

                return UsernameUpdateMode.UserSelect;
            }
        }

        protected DisplaynameUpdateMode DisplaynameMode
        {
            get
            {
                if (Settings["ShowDisplayName"] is object)
                {
                    switch (Conversions.ToString(Settings["ShowDisplayName"]) ?? "")
                    {
                        case "EMAIL":
                            {
                                return DisplaynameUpdateMode.Email;
                            }

                        case "FIRSTLETTER.LASTNAME":
                            {
                                return DisplaynameUpdateMode.FirstLetterLastname;
                            }

                        case "FIRSTNAME.LASTNAME":
                            {
                                return DisplaynameUpdateMode.FirstnameLastname;
                            }

                        case "LASTNAME":
                            {
                                return DisplaynameUpdateMode.Lastname;
                            }

                        default:
                            {
                                return DisplaynameUpdateMode.UserSelect;
                            }
                    }
                }

                return DisplaynameUpdateMode.UserSelect;
            }
        }

        protected int RedirectAfterSubmit
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["RedirectAfterSubmit"])))
                {
                    return Conversions.ToInteger(Settings["RedirectAfterSubmit"]);
                }

                return Null.NullInteger;
            }
        }

        protected int RedirectAfterLogin
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["RedirectAfterLogin"])))
                {
                    return Conversions.ToInteger(Settings["RedirectAfterLogin"]);
                }

                return Null.NullInteger;
            }
        }

        protected string NotifyRole
        {
            get
            {
                if (Settings["NotifyRole"] is object)
                {
                    return Conversions.ToString(Settings["NotifyRole"]);
                }

                return Null.NullString;
            }
        }

        protected bool NotifyUser
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["NotifyUser"])))
                {
                    return Conversions.ToBoolean(Settings["NotifyUser"]);
                }

                return false;
            }
        }

        protected bool IncludeHeaders
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["IncludeHeaders"])))
                {
                    return Conversions.ToBoolean(Settings["IncludeHeaders"]);
                }

                return true;
            }
        }

        protected int AddToRoleOnSubmit
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["AddToRoleOnSubmit"])))
                {
                    try
                    {
                        return Conversions.ToInteger(Settings["AddToRoleOnSubmit"]);
                    }
                    catch (Exception ex)
                    {
                    }
                }

                return Null.NullInteger;
            }
        }

        protected int RemoveFromRoleOnSubmit
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["RemoveFromRoleOnSubmit"])))
                {
                    try
                    {
                        return Conversions.ToInteger(Settings["RemoveFromRoleOnSubmit"]);
                    }
                    catch (Exception ex)
                    {
                    }
                }

                return Null.NullInteger;
            }
        }

        protected string AddToRoleStatus
        {
            get
            {
                if (Settings["AddToRoleStatus"] is object)
                {
                    try
                    {
                        return Conversions.ToString(Settings["AddToRoleStatus"]);
                    }
                    catch (Exception ex)
                    {
                    }
                }

                return "pending";
            }
        }

        protected string ReCaptchaKey
        {
            get
            {
                if (Settings["ReCaptchaKey"] is object)
                {
                    try
                    {
                        return Conversions.ToString(Settings["ReCaptchaKey"]);
                    }
                    catch (Exception ex)
                    {
                    }
                }

                return "";
            }
        }

        protected string FilterByRole
        {
            get
            {
                if (Settings["FilterByRole"] is object)
                {
                    return Conversions.ToString(Settings["FilterByRole"]);
                }

                return Null.NullString;
            }
        }

        protected bool PreloadList
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["PreloadList"])))
                {
                    return Conversions.ToBoolean(Settings["PreloadList"]);
                }

                return false;
            }
        }

        protected int FilterSelectByRole
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["FilterSelectByRole"])))
                {
                    return Conversions.ToInteger(Settings["FilterSelectByRole"]);
                }

                return Null.NullInteger;
            }
        }

        public int UsermanagementTab
        {
            get
            {
                if (!string.IsNullOrEmpty(Conversions.ToString(Settings["UsermanagementTab"])))
                {
                    return Conversions.ToInteger(Settings["UsermanagementTab"]);
                }

                return PortalSettings.HomeTabId;
            }
        }

        public string ModuleTheme
        {
            get
            {
                if (Settings.Contains("ModuleTheme"))
                {
                    return Conversions.ToString(Settings["ModuleTheme"]);
                }
                else
                {
                    return "Default";
                }
            }
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        public string CurrentLocale
        {
            get
            {
                return ((PageBase)Page).PageCulture.Name;
            }
        }

        protected string ProfileResourcefile
        {
            get
            {
                return ResolveUrl("~/Desktopmodules/Admin/Security/App_LocalResources/Profile.ascx");
            }
        }

        protected UserInfo User
        {
            get
            {
                UserInfo oUser = null;
                if (Request.QueryString["uid"] is object)
                {
                    if (Information.IsNumeric(Request.QueryString["uid"]))
                    {
                        oUser = UserController.GetUserById(PortalId, Convert.ToInt32(Request.QueryString["uid"]));
                    }
                }
                else
                {
                    oUser = UserController.GetCurrentUserInfo();
                }

                return oUser;
            }
        }

        public bool IsUser
        {
            get
            {
                if (User is object)
                {
                    if (User.UserID == UserInfo.UserID)
                    {
                        return true;
                    }
                }

                return false;
            }
        }

        public bool IsAdmin
        {
            get
            {
                return UserInfo.IsInRole(PortalSettings.AdministratorRoleName);
            }
        }

        public string TemplateBasePath
        {
            get
            {
                return Server.MapPath(TemplateSourceDirectory + "/Templates/");
            }
        }

        public string GetTemplate(string SelectedTheme, string TemplateName, string Locale, bool CreateIfNotExists)
        {

            // make sure the basepath is not in the theme name. That way we can use it also from the view controls...
            SelectedTheme = SelectedTheme.ToLower().Replace(TemplateBasePath.ToLower(), "");
            string path = TemplateBasePath + SelectedTheme + @"\" + TemplateName.Replace(Constants.TemplateName_Extension, "." + Locale + Constants.TemplateName_Extension);
            if ((PortalSettings.DefaultLanguage.ToLower() ?? "") == (Locale.ToLower() ?? "") | string.IsNullOrEmpty(Locale))
            {
                path = TemplateBasePath + SelectedTheme + @"\" + TemplateName;
            }

            if (System.IO.File.Exists(path))
            {
                return TemplateController.GetTemplate(path);
            }

            if (CreateIfNotExists)
            {
                string sourcePath = SelectedTheme + @"\" + TemplateName;
                string targetPath = SelectedTheme + @"\" + TemplateName.Replace(Constants.TemplateName_Extension, "." + Locale + Constants.TemplateName_Extension);
                if ((PortalSettings.DefaultLanguage.ToLower() ?? "") == (Locale.ToLower() ?? "") | string.IsNullOrEmpty(Locale))
                {
                    targetPath = SelectedTheme + @"\" + TemplateName;
                }

                try
                {
                    System.IO.File.Copy(sourcePath, targetPath, true);
                    return TemplateController.GetTemplate(targetPath);
                }
                catch
                {
                }
            }

            if (!System.IO.File.Exists(path))
            {
                path = TemplateBasePath + TemplateBasePath + @"Default\" + TemplateName;
            }

            return TemplateController.GetTemplate(path);
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        protected bool IsValidUserAttribute(string Attribute, Control objRoot)
        {
            string id = "";
            switch (Attribute ?? "")
            {
                case Constants.User_Username:
                    {
                        id = Constants.ControlId_Username;
                        break;
                    }

                case Constants.User_Displayname:
                    {
                        id = Constants.ControlId_Displayname;
                        break;
                    }

                case Constants.User_Firstname:
                    {
                        id = Constants.ControlId_Firstname;
                        break;
                    }

                case Constants.User_Lastname:
                    {
                        id = Constants.ControlId_Lastname;
                        break;
                    }

                case Constants.User_PasswordCurrent:
                    {
                        id = Constants.ControlId_PasswordCurrent;
                        break;
                    }

                case Constants.User_Password1:
                    {
                        id = Constants.ControlId_Password1;
                        break;
                    }

                case Constants.User_Password2:
                    {
                        id = Constants.ControlId_Password2;
                        break;
                    }

                case Constants.User_Email:
                    {
                        id = Constants.ControlId_Email;
                        break;
                    }

                case Constants.User_PasswordQuestion:
                    {
                        id = Constants.ControlId_PasswordQuestion;
                        break;
                    }

                case Constants.User_PasswordAnswer:
                    {
                        id = Constants.ControlId_PasswordAnswer;
                        break;
                    }
            }

            TextBox txtbox = (TextBox)FindControlRecursive(objRoot, objRoot.ID + "_" + id);
            if (txtbox is object)
            {
                if (!string.IsNullOrEmpty(txtbox.Text))
                {
                    if ((id ?? "") == Constants.ControlId_Email)
                    {
                        return IsValidEmail(txtbox.Text);
                    }
                    else
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        protected bool IsValidEmail(string strEmail)
        {
            if (ValidateEmailThroughRegex == false)
            {
                return true;
            }

            if (!string.IsNullOrEmpty(EmailRegex))
            {
                return Regex.IsMatch(strEmail, EmailRegex);
            }

            var settings = UserController.GetUserSettings(PortalId);
            string regexString = Conversions.ToString(settings["Security_EmailValidation"]);
            return Regex.IsMatch(strEmail, regexString);
        }

        protected bool IsValidProperty(UserInfo objUser, ProfilePropertyDefinition ProfProperty, ref Control objControl)
        {
            if (ProfProperty.Required == false)
            {
                return true;
            }

            var ctl = GetPropertyControl(ProfProperty, ref objControl);
            if (ctl is object)
            {
                if (ctl is RadComboBox)
                {
                    if (!string.IsNullOrEmpty(((RadComboBox)ctl).Text))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (ctl is TextBox)
                {
                    if (!string.IsNullOrEmpty(((TextBox)ctl).Text))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (ctl is RadDateTimePicker)
                {
                    if (((RadDateTimePicker)ctl).DbSelectedDate is object)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (ctl is RadDatePicker)
                {
                    if (((RadDatePicker)ctl).DbSelectedDate is object)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (ctl is RadNumericTextBox)
                {
                    if (((RadNumericTextBox)ctl).Value >= 0 == true)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (ctl is DnnImageEditControl)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(((DnnImageEditControl)ctl).Value, "", false)))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (ctl is DnnFileEditControl)
                {
                    if (Conversions.ToBoolean(Operators.ConditionalCompareObjectNotEqual(((DnnFileEditControl)ctl).Value, "", false)))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (ctl is CheckBox)
                {
                    if (!(((CheckBox)ctl).Checked == false))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }

            return true;
        }

        protected string GetPropertyType(int TypeId)
        {
            var lc = new DotNetNuke.Common.Lists.ListController();
            var entry = lc.GetListEntryInfo(TypeId);
            if (entry is object)
            {
                return entry.Value;
            }

            return "";
        }

        public Control FindControlRecursive(Control objRoot, string id)
        {
            if ((objRoot.ID ?? "") == (id ?? ""))
            {
                return objRoot;
            }

            foreach (Control c in objRoot.Controls)
            {
                var t = FindControlRecursive(c, id);
                if (t is object)
                {
                    return t;
                }
            }

            return null;
        }

        public Control FindMembershipControlsRecursive(Control objRoot, string id)
        {
            if (objRoot.ID is object && objRoot.ID.StartsWith(id))
            {
                return objRoot;
            }

            foreach (Control c in objRoot.Controls)
            {
                var t = FindMembershipControlsRecursive(c, id);
                if (t is object)
                {
                    return t;
                }
            }

            return null;
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        protected List<string> GetPropertyValueList(ProfilePropertyDefinition PropertyDefinition)
        {
            List<string> lst = null;
            if (DataCache.GetCache("dnnwerk_ValueList_" + PropertyDefinition.PropertyDefinitionId.ToString()) is object)
            {
                lst = (List<string>)DataCache.GetCache("dnnwerk_ValueList_" + PropertyDefinition.PropertyDefinitionId.ToString());
            }

            if (lst is null)
            {
                lst = new List<string>();
                IDataReader dr = null;
                if (FilterSelectByRole == Null.NullInteger)
                {
                    dr = DotNetNuke.Data.DataProvider.Instance().ExecuteReader("dnnWerk_Users_GetValueList", PropertyDefinition.PropertyDefinitionId, DBNull.Value);
                }
                else
                {
                    dr = DotNetNuke.Data.DataProvider.Instance().ExecuteReader("dnnWerk_Users_GetValueList", PropertyDefinition.PropertyDefinitionId, FilterSelectByRole);
                }

                if (dr is object)
                {
                    while (dr.Read())
                    {
                        string strValueSimpliefied = Convert.ToString(dr["PropertyValue"]);
                        if (strValueSimpliefied.Contains(","))
                        {
                            var strValue = strValueSimpliefied.Split(char.Parse(","));
                            foreach (string strItem in strValue)
                            {
                                if (strItem.Trim().Length > 0)
                                {
                                    if (!lst.Contains(strItem))
                                    {
                                        lst.Add(strItem);
                                    }
                                }
                            }
                        }
                        else if (!lst.Contains(strValueSimpliefied))
                        {
                            if (strValueSimpliefied.Trim().Length > 0)
                            {
                                lst.Add(strValueSimpliefied);
                            }
                        }
                    }

                    dr.Close();
                    dr.Dispose();

                    // DataCache.SetCache("dnnwerk_ValueList_" & PropertyDefinition.PropertyDefinitionId.ToString, lst)
                }
            }

            return lst;
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        protected void ProcessDisplayTemplate(ref ControlCollection plhControls, UserInfo objItem, string Template)
        {
            var literal = new Literal();
            string delimStr = "[]";
            var delimiter = delimStr.ToCharArray();
            string[] templateArray;
            templateArray = Template.Split(delimiter);
            for (int iPtr = 0, loopTo = templateArray.Length - 1; iPtr <= loopTo; iPtr += 2)
            {
                string strHTML = templateArray[iPtr].ToString();
                plhControls.Add(new LiteralControl(strHTML));
                if (iPtr < templateArray.Length - 1)
                {
                    string strToken = templateArray[iPtr + 1];
                    switch (strToken ?? "")
                    {
                        case "USERID":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.UserID.ToString();
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "USERNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.Username.ToString();
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "CREATEDDATE":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.CreatedOnDate.ToLongDateString();
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "CREATEDDATELONG":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.CreatedOnDate.ToLongDateString();
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "FIRSTNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.FirstName;
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "LASTNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.LastName;
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "EMAIL":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.Email;
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "DISPLAYNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = objItem.DisplayName;
                                    objLiteral.EnableViewState = false;
                                    plhControls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        default:
                            {
                                if (strToken.StartsWith("PROFILE:"))
                                {
                                    string strProperty = strToken.Substring(8, strToken.Length - 8);
                                    var prop = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strProperty);
                                    if (prop is object)
                                    {
                                        AddPropertyValue(ref plhControls, prop, objItem);
                                    }
                                }

                                break;
                            }
                    }
                }
            }
        }

        protected void ProcessDisplayTemplate(ref PlaceHolder plhControls, DataRowView objItem, string Template)
        {
            var literal = new Literal();
            string delimStr = "[]";
            var delimiter = delimStr.ToCharArray();
            string[] templateArray;
            templateArray = Template.Split(delimiter);
            for (int iPtr = 0, loopTo = templateArray.Length - 1; iPtr <= loopTo; iPtr += 2)
            {
                string strHTML = templateArray[iPtr].ToString();
                plhControls.Controls.Add(new LiteralControl(strHTML));
                if (iPtr < templateArray.Length - 1)
                {
                    string strToken = templateArray[iPtr + 1];
                    switch (strToken ?? "")
                    {
                        case "USERID":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Conversions.ToString(objItem["UserId"]);
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "USERNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Conversions.ToString(objItem["Username"]);
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "CREATEDDATE":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Convert.ToDateTime(objItem["CreatedDate"]).ToLongDateString();
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "CREATEDDATELONG":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Convert.ToDateTime(objItem["CreatedDate"]).ToLongDateString();
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "FIRSTNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Conversions.ToString(objItem["FirstName"]);
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "LASTNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Conversions.ToString(objItem["LastName"]);
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "EMAIL":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Conversions.ToString(objItem["Email"]);
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        case "DISPLAYNAME":
                            {
                                try
                                {
                                    var objLiteral = new Literal();
                                    objLiteral.Text = Conversions.ToString(objItem["DisplayName"]);
                                    objLiteral.EnableViewState = false;
                                    plhControls.Controls.Add(objLiteral);
                                }
                                catch (Exception ex)
                                {
                                }

                                break;
                            }

                        default:
                            {
                                if (strToken.StartsWith("PROFILE:"))
                                {
                                    string strProperty = strToken.Substring(8, strToken.Length - 8);
                                    var prop = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strProperty);
                                    if (prop is object)
                                    {
                                        AddPropertyValue(ref plhControls, prop, objItem);
                                    }
                                }

                                break;
                            }
                    }
                }
            }
        }

        protected void ProcessFormTemplate(ref PlaceHolder plhControls, string Template, UserInfo objUser)
        {
            plhControls.Controls.Clear();
            string strIdent = plhControls.ID + "_";
            var literal = new Literal();
            string delimStr = "[]";
            var delimiter = delimStr.ToCharArray();
            string[] templateArray;
            templateArray = Template.Split(delimiter);
            for (int iPtr = 0, loopTo = templateArray.Length - 1; iPtr <= loopTo; iPtr += 2)
            {
                string strHTML = templateArray[iPtr].ToString();
                plhControls.Controls.Add(new LiteralControl(strHTML));
                if (iPtr < templateArray.Length - 1)
                {
                    string strToken = templateArray[iPtr + 1];
                    if (strToken.StartsWith("DNNLBL:")) // rendering a dnn label control with help icons etc...
                    {
                        string strObject = strToken.Split(char.Parse(":"))[1];
                        string strKey = strToken.Split(char.Parse(":"))[2];
                        string strTargetControlId = "";
                        string strLabelText = "";
                        string strHelpText = "";
                        string strCssClass = "";
                        ProfilePropertyDefinition prop = null;
                        switch (strObject.ToLower() ?? "")
                        {
                            case "static":
                                {
                                    strLabelText = strKey;
                                    try
                                    {
                                        strHelpText = strToken.Split(char.Parse(":"))[3];
                                    }
                                    catch (Exception ex)
                                    {
                                        strHelpText = strKey;
                                    }

                                    break;
                                }

                            case "login":
                                {
                                    strLabelText = Localization.GetString("Login_" + strKey, LocalResourceFile);
                                    strHelpText = Localization.GetString("Login_" + strKey + ".Help", LocalResourceFile);
                                    strCssClass = "";
                                    switch (strKey.ToLower() ?? "")
                                    {
                                        case "username":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_UsernameForLogin;
                                                if (LoginWithEmail)
                                                {
                                                    strLabelText = Localization.GetString("Login_Email.Text", LocalResourceFile);
                                                    strHelpText = Localization.GetString("Login_Email.Help", LocalResourceFile);
                                                }
                                                else
                                                {
                                                    strLabelText = Localization.GetString("Login_Username.Text", LocalResourceFile);
                                                    strHelpText = Localization.GetString("Login_Username.Help", LocalResourceFile);
                                                }

                                                break;
                                            }

                                        case "password":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_PasswordForLogin;
                                                strLabelText = Localization.GetString("Login_Password.Text", LocalResourceFile);
                                                strHelpText = Localization.GetString("Login_Password.Help", LocalResourceFile);
                                                break;
                                            }

                                        case "remember":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_RememberForLogin;
                                                strLabelText = Localization.GetString("Login_Remember.Text", LocalResourceFile);
                                                strHelpText = Localization.GetString("Login_Remember.Help", LocalResourceFile);
                                                break;
                                            }
                                    }

                                    break;
                                }

                            case "profile":
                                {

                                    // set profile property (needed for required indicator)
                                    prop = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey);

                                    // set target control id of dnn label
                                    strTargetControlId = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + prop.PropertyDefinitionId.ToString();

                                    // set text and helptext
                                    strLabelText = Localization.GetString("ProfileProperties_" + strKey, ProfileResourcefile);
                                    strHelpText = Localization.GetString("ProfileProperties_" + strKey + ".Help", ProfileResourcefile);
                                    strCssClass = Conversions.ToString(Interaction.IIf(prop.Required, "dnnFormRequired", ""));
                                    break;
                                }

                            case "user":
                                {
                                    // set target control id of dnn label
                                    switch (strKey.ToLower() ?? "")
                                    {
                                        case "username":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_Username;
                                                break;
                                            }

                                        case "email":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_Email;
                                                break;
                                            }

                                        case "displayname":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_Displayname;
                                                break;
                                            }

                                        case "firstname":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_Firstname;
                                                break;
                                            }

                                        case "lastname":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_Lastname;
                                                break;
                                            }

                                        case "passwordcurrent":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_PasswordCurrent;
                                                break;
                                            }

                                        case "password1":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_Password1;
                                                break;
                                            }

                                        case "password2":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_Password2;
                                                break;
                                            }

                                        case "passwordquestion":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_PasswordQuestion;
                                                break;
                                            }

                                        case "passwordanswer":
                                            {
                                                strTargetControlId = plhControls.ID + "_" + Constants.ControlId_PasswordAnswer;
                                                break;
                                            }
                                    }

                                    // set text and helptext
                                    strLabelText = Localization.GetString(strKey, LocalResourceFile);
                                    strHelpText = Localization.GetString(strKey + ".Help", LocalResourceFile);
                                    strCssClass = "dnnFormRequired";

                                    // special case: password requires setting min password length and min nonalphanumeric chars on help text
                                    if (strKey.ToLower() == "password1")
                                    {
                                        int MinLength = 0;
                                        int MinNonAlphaNumeric = 0;
                                        try
                                        {
                                            MinLength = DotNetNuke.Security.Membership.MembershipProvider.Instance().MinPasswordLength;
                                        }
                                        catch
                                        {
                                        }

                                        try
                                        {
                                            MinNonAlphaNumeric = DotNetNuke.Security.Membership.MembershipProvider.Instance().MinNonAlphanumericCharacters;
                                        }
                                        catch
                                        {
                                        }

                                        string strPolicy = string.Format(Localization.GetString("PasswordPolicy_MinLength", LocalResourceFile), MinLength.ToString());
                                        if (MinNonAlphaNumeric > 0)
                                        {
                                            strPolicy += string.Format(Localization.GetString("PasswordPolicy_MinNonAlphaNumeric", LocalResourceFile), MinNonAlphaNumeric.ToString());
                                        }

                                        strHelpText = string.Format(Localization.GetString(strKey + ".Help", LocalResourceFile), strPolicy);
                                    }

                                    break;
                                }
                        }

                        // no resorce found, use token identifier
                        if (string.IsNullOrEmpty(strLabelText))
                            strLabelText = strKey;
                        if (string.IsNullOrEmpty(strHelpText))
                            strHelpText = strKey;
                        try
                        {
                            string strHideRequired = strToken.Split(char.Parse(":"))[3];
                            if (!string.IsNullOrEmpty(strHideRequired))
                            {
                                if (strHideRequired.ToLower() == "hiderequired")
                                {
                                    strCssClass = "";
                                }
                            }
                        }
                        catch
                        {
                        }

                        if (strObject.ToLower() == "profile" && strObject.ToLower() == "region") // special case: region label is needed two times, 
                        {
                            // one for region textbox, one for region dropdown

                            var oControlDrop = new Control();
                            oControlDrop = (DotNetNuke.UI.UserControls.LabelControl)LoadControl("~/controls/LabelControl.ascx");
                            DotNetNuke.UI.UserControls.LabelControl dnnLabelDrop = (DotNetNuke.UI.UserControls.LabelControl)oControlDrop;
                            dnnLabelDrop.Text = strLabelText;
                            dnnLabelDrop.HelpText = strHelpText;
                            dnnLabelDrop.ControlName = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_DropdownSuffix + prop.PropertyDefinitionId.ToString();
                            dnnLabelDrop.ID = plhControls.ID + "_RESX_" + strObject + Constants.ControlId_DropdownSuffix + "_" + strKey;
                            dnnLabelDrop.CssClass = strCssClass;
                            plhControls.Controls.Add(dnnLabelDrop);
                            var oControlText = new Control();
                            oControlText = (DotNetNuke.UI.UserControls.LabelControl)LoadControl("~/controls/LabelControl.ascx");
                            DotNetNuke.UI.UserControls.LabelControl dnnLabelText = (DotNetNuke.UI.UserControls.LabelControl)oControlText;
                            dnnLabelText.Text = strLabelText;
                            dnnLabelText.HelpText = strHelpText;
                            dnnLabelText.ControlName = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_TextSuffix + prop.PropertyDefinitionId.ToString();
                            dnnLabelText.ID = plhControls.ID + "_RESX_" + strObject + Constants.ControlId_TextSuffix + "_" + strKey;
                            dnnLabelDrop.CssClass = strCssClass;
                            plhControls.Controls.Add(dnnLabelText);
                        }
                        else
                        {
                            var oControl = new Control();
                            oControl = (DotNetNuke.UI.UserControls.LabelControl)LoadControl("~/controls/LabelControl.ascx");
                            DotNetNuke.UI.UserControls.LabelControl dnnLabel = (DotNetNuke.UI.UserControls.LabelControl)oControl;
                            dnnLabel.Text = strLabelText;
                            dnnLabel.ControlName = strTargetControlId;
                            dnnLabel.HelpText = strHelpText;
                            dnnLabel.CssClass = strCssClass;
                            dnnLabel.ID = plhControls.ID + "_RESX_" + strObject + "_" + strKey;
                            plhControls.Controls.Add(dnnLabel);
                        }
                    }

                    if (strToken.StartsWith("RESX:")) // simple localized resource rendering
                    {
                        string strObject = strToken.Split(char.Parse(":"))[1];
                        string strKey = strToken.Split(char.Parse(":"))[2];
                        string strText = Localization.GetString(strKey, LocalResourceFile);
                        ProfilePropertyDefinition prop = null;
                        string strType = "";
                        switch (strObject.ToLower() ?? "")
                        {
                            case "profile":
                                {
                                    strText = Localization.GetString("ProfileProperties_" + strKey, ProfileResourcefile);
                                    break;
                                }

                            case "profilehelp":
                                {
                                    strText = Localization.GetString("ProfileProperties_" + strKey + ".Help", ProfileResourcefile);
                                    break;
                                }

                            case "user":
                            case "login":
                                {
                                    strText = Localization.GetString(strKey, LocalResourceFile);
                                    break;
                                }

                            case "userhelp":
                            case "loginhelp":
                                {
                                    strText = Localization.GetString(strKey + ".Help", LocalResourceFile);
                                    break;
                                }
                        }

                        // no resorce found, use token identifier
                        if (string.IsNullOrEmpty(strText))
                            strText = strKey;
                        var objLiteral = new Literal();
                        objLiteral.Text = strText;
                        objLiteral.ID = plhControls.ID + "_RESX_" + strObject + "_" + strKey;
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                    }
                    else if (strToken.StartsWith("VALUE:")) // render object value
                    {
                        string strObject = strToken.Split(char.Parse(":"))[1];
                        string strKey = strToken.Split(char.Parse(":"))[2];
                        string strValue = "";
                        if (objUser is object)
                        {
                            switch (strObject.ToLower() ?? "")
                            {
                                case "profile":
                                    {
                                        if (strKey.ToLower() == "photourl")
                                        {
                                            strValue = objUser.Profile.PhotoURL;
                                        }
                                        else
                                        {
                                            strValue = objUser.Profile.GetPropertyValue(strKey);
                                        }

                                        break;
                                    }

                                case "user":
                                    {
                                        switch (strKey.ToLower() ?? "")
                                        {
                                            case "userid":
                                                {
                                                    strValue = objUser.UserID.ToString();
                                                    break;
                                                }

                                            case "username":
                                                {
                                                    strValue = objUser.Username;
                                                    break;
                                                }

                                            case "firstname":
                                                {
                                                    strValue = objUser.FirstName;
                                                    break;
                                                }

                                            case "lastname":
                                                {
                                                    strValue = objUser.LastName;
                                                    break;
                                                }

                                            case "email":
                                                {
                                                    strValue = objUser.Email;
                                                    break;
                                                }

                                            case "displayname":
                                                {
                                                    strValue = objUser.DisplayName;
                                                    break;
                                                }

                                            case "membersince":
                                                {
                                                    strValue = objUser.CreatedOnDate.ToShortDateString();
                                                    break;
                                                }

                                            case "passwordquestion":
                                                {
                                                    strValue = objUser.Membership.PasswordQuestion;
                                                    break;
                                                }

                                            case "passwordanswer":
                                                {
                                                    strValue = objUser.Membership.PasswordAnswer;
                                                    break;
                                                }
                                        }

                                        break;
                                    }
                            }

                            bool blnHideSpan = false;
                            try
                            {
                                if (strToken.Split(char.Parse(":"))[3].ToLower() == "nospan")
                                {
                                    blnHideSpan = true;
                                }
                            }
                            catch
                            {
                            }

                            var ctl = new Literal();
                            ctl.EnableViewState = false;
                            if (blnHideSpan)
                            {
                                ctl.Text = strValue;
                            }
                            else
                            {
                                ctl.Text = "<span class=\"value\">" + strValue + "</span>";
                            }

                            plhControls.Controls.Add(ctl);
                        }
                    }
                    else if (strToken.StartsWith("CTL:"))
                    {
                        string strObject = strToken.Split(char.Parse(":"))[1];
                        string strKey = strToken.Split(char.Parse(":"))[2];
                        switch (strObject.ToLower() ?? "")
                        {
                            case "login":
                                {
                                    switch (strKey.ToUpper() ?? "")
                                    {
                                        case "USERNAME":
                                            {
                                                var ctl = new TextBox();
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_UsernameForLogin;
                                                ctl.EnableViewState = true;
                                                plhControls.Controls.Add(ctl);
                                                break;
                                            }

                                        case "PASSWORD":
                                            {
                                                var ctl = new TextBox();
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_PasswordForLogin;
                                                ctl.EnableViewState = true;
                                                ctl.TextMode = TextBoxMode.Password;
                                                plhControls.Controls.Add(ctl);
                                                break;
                                            }

                                        case "REMEMBER":
                                            {
                                                var ctl = new CheckBox();
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_RememberForLogin;
                                                ctl.EnableViewState = true;
                                                plhControls.Controls.Add(ctl);
                                                break;
                                            }
                                    }

                                    break;
                                }

                            case "profile":
                                {
                                    var prop = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey);
                                    if (prop is object)
                                    {
                                        AddPropertyControl(prop, ref plhControls, prop.Visible, objUser);
                                    }

                                    break;
                                }

                            case "visibility":
                                {
                                    var prop = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey);
                                    if (prop is object)
                                    {
                                        AddVisibilityControl(prop, ref plhControls, prop.Visible, objUser);
                                    }

                                    break;
                                }

                            case "updatebutton":
                                {
                                    var btn = new Button();
                                    btn.Text = Conversions.ToString(Interaction.IIf(string.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile)));
                                    btn.ID = plhControls.ID + "_" + Constants.ControlId_UpdateButton;
                                    btn.CssClass = "dnnPrimaryAction";
                                    plhControls.Controls.Add(btn);
                                    break;
                                }

                            case "loginbutton":
                                {
                                    var btn = new Button();
                                    btn.Text = Conversions.ToString(Interaction.IIf(string.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile)));
                                    btn.ID = plhControls.ID + "_" + Constants.ControlId_LoginButton;
                                    btn.CssClass = "dnnPrimaryAction";
                                    plhControls.Controls.Add(btn);
                                    break;
                                }

                            case "lostpasswordbutton":
                                {
                                    var btn = new Button();
                                    btn.Text = Conversions.ToString(Interaction.IIf(string.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile)));
                                    btn.ID = plhControls.ID + "_" + Constants.ControlId_LostPasswordButton;
                                    btn.CssClass = "dnnSecondaryAction";
                                    plhControls.Controls.Add(btn);
                                    break;
                                }

                            case "resetpasswordbutton":
                                {
                                    var btn = new Button();
                                    btn.Text = Conversions.ToString(Interaction.IIf(string.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile)));
                                    btn.ID = plhControls.ID + "_" + Constants.ControlId_ResetPasswordButton;
                                    btn.CssClass = "dnnSecondaryAction";
                                    plhControls.Controls.Add(btn);
                                    break;
                                }

                            case "deletebutton":
                                {
                                    var btn = new Button();
                                    btn.Text = Conversions.ToString(Interaction.IIf(string.IsNullOrEmpty(Localization.GetString(strKey, LocalResourceFile)), strKey, Localization.GetString(strKey, LocalResourceFile)));
                                    btn.ID = plhControls.ID + "_" + Constants.ControlId_DeleteButton;
                                    btn.CssClass = "dnnSecondaryAction";
                                    plhControls.Controls.Add(btn);
                                    break;
                                }

                            case "user":
                                {
                                    var ctl = new TextBox();
                                    ctl.Enabled = true;
                                    switch (strKey.ToUpper() ?? "")
                                    {
                                        case "USERNAME":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_Username;
                                                if (objUser is object)
                                                {
                                                    ctl.Text = Convert.ToString(objUser.Username);
                                                    ctl.Enabled = false;
                                                }

                                                break;
                                            }

                                        case "PASSWORDCURRENT":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_PasswordCurrent;
                                                ctl.TextMode = (TextBoxMode)InputMode.Password;
                                                break;
                                            }

                                        case "PASSWORD1":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_Password1;
                                                ctl.TextMode = (TextBoxMode)InputMode.Password;
                                                break;
                                            }

                                        case "PASSWORD2":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_Password2;
                                                ctl.TextMode = (TextBoxMode)InputMode.Password;
                                                break;
                                            }

                                        case "PASSWORDQUESTION":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_PasswordQuestion;
                                                break;
                                            }

                                        case "PASSWORDANSWER":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_PasswordAnswer;
                                                break;
                                            }

                                        case "FIRSTNAME":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_Firstname;
                                                if (objUser is object)
                                                {
                                                    ctl.Text = objUser.FirstName;
                                                }

                                                break;
                                            }

                                        case "LASTNAME":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_Lastname;
                                                if (objUser is object)
                                                {
                                                    ctl.Text = objUser.LastName;
                                                }

                                                break;
                                            }

                                        case "EMAIL":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_Email;
                                                if (objUser is object)
                                                {
                                                    ctl.Text = objUser.Email;
                                                }

                                                break;
                                            }

                                        case "DISPLAYNAME":
                                            {
                                                ctl.ID = plhControls.ID + "_" + Constants.ControlId_Displayname;
                                                if (objUser is object)
                                                {
                                                    ctl.Text = objUser.DisplayName;
                                                }

                                                break;
                                            }
                                    }

                                    plhControls.Controls.Add(ctl);
                                    break;
                                }

                            case "rolemembership":
                                {

                                    // strKey is now supposed to be an existing role
                                    var ctl = new CheckBox();
                                    ctl.ID = plhControls.ID + "_" + Constants.ControlId_RoleMembership + strKey.Replace(" ", "");
                                    try
                                    {
                                        string strPending = strToken.Split(char.Parse(":"))[3];
                                        if (strPending.ToLower() == "pending")
                                        {
                                            ctl.ID += "_Pending";
                                        }
                                    }
                                    catch
                                    {
                                    }

                                    ctl.Checked = false;
                                    plhControls.Controls.Add(ctl);
                                    break;
                                }
                        }
                    }
                    else if (strToken.StartsWith("RECAPTCHA:"))
                    {
                        string strPublicKey = strToken.Split(char.Parse(":"))[1];
                        string strTheme = "red";
                        try
                        {
                            strTheme = strToken.Split(char.Parse(":"))[2];
                        }
                        catch
                        {
                        }

                        string strProtocoll = "http";
                        if (PortalSettings.ActiveTab.IsSecure)
                        {
                            strProtocoll = "https";
                        }

                        var strScript = new LiteralControl();
                        strScript.Text = string.Format("<script type=\"text/javascript\" src=\"{0}://www.google.com/recaptcha/api/challenge?k={1}\"></script>", strProtocoll, strPublicKey);
                        var pnlCaptcha = new Panel();
                        pnlCaptcha.ID = plhControls.ID + "_ReCaptchaPanel";
                        if (strTheme.ToLower() != "red")
                        {
                            string strOptions = "<script type=\"text/javascript\">var RecaptchaOptions = { theme : '" + strTheme + "'};</script>";
                            pnlCaptcha.Controls.Add(new LiteralControl(strOptions));
                        }

                        pnlCaptcha.Controls.Add(strScript);
                        plhControls.Controls.Add(pnlCaptcha);
                    }
                    else if (strToken.StartsWith("REQUIRED:"))
                    {
                        string strObject = strToken.Split(char.Parse(":"))[1];
                        string strKey = strToken.Split(char.Parse(":"))[2];
                        string strId = "";
                        bool blnNeedsIndicator = false;
                        switch (strObject.ToLower() ?? "")
                        {
                            case "profile":
                                {
                                    var prop = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, strKey);
                                    if (prop is object)
                                    {
                                        if (prop.Required)
                                        {
                                            strId = plhControls.ID + "_" + Constants.ControlId_PanelRequired + prop.PropertyDefinitionId.ToString();
                                            blnNeedsIndicator = true;
                                        }
                                    }

                                    break;
                                }

                            case "user":
                                {
                                    strId = plhControls.ID + "_" + Constants.ControlId_PanelRequired + strKey;
                                    blnNeedsIndicator = true;
                                    if (strKey.ToLower() == "username" && objUser is object)
                                    {
                                        blnNeedsIndicator = false;
                                    }

                                    break;
                                }
                        }

                        if (blnNeedsIndicator)
                        {
                            var pnlRequired = new Panel();
                            pnlRequired.ID = strId;
                            pnlRequired.CssClass = Constants.CssClass_RequiredPanel;
                            pnlRequired.Visible = true;
                            plhControls.Controls.Add(pnlRequired);
                        }
                    }
                    else if (strToken.StartsWith("IFSOCIALMEMBERSHIPPENDING:"))
                    {
                        string strRole = strToken.Split(char.Parse(":"))[1];
                        bool blnIsInRole = false;
                        if (objUser is object)
                        {
                            foreach (UserRoleInfo objRole in objUser.Social.Roles)
                            {
                                if ((objRole.RoleName ?? "") == (strRole ?? "") && objRole.Status == DotNetNuke.Security.Roles.RoleStatus.Pending)
                                {
                                    blnIsInRole = true;
                                }
                            }
                        }

                        if (blnIsInRole == false)
                        {
                            while (iPtr < templateArray.Length - 1)
                            {
                                if ((templateArray[iPtr + 1].ToUpper() ?? "") == ("/IFSOCIALMEMBERSHIPPENDING:" + strRole.ToUpper() ?? ""))
                                {
                                    break;
                                }

                                iPtr = iPtr + 1;
                            }
                        }
                    }
                    else if (strToken.StartsWith("IFSOCIALMEMBERSHIPAPPROVED:"))
                    {
                        string strRole = strToken.Split(char.Parse(":"))[1];
                        bool blnIsInRole = false;
                        if (objUser is object)
                        {
                            foreach (UserRoleInfo objRole in objUser.Social.Roles)
                            {
                                if ((objRole.RoleName ?? "") == (strRole ?? "") && objRole.Status == DotNetNuke.Security.Roles.RoleStatus.Approved)
                                {
                                    blnIsInRole = true;
                                }
                            }
                        }

                        if (blnIsInRole == false)
                        {
                            while (iPtr < templateArray.Length - 1)
                            {
                                if ((templateArray[iPtr + 1].ToUpper() ?? "") == ("/IFSOCIALMEMBERSHIPAPPROVED:" + strRole.ToUpper() ?? ""))
                                {
                                    break;
                                }

                                iPtr = iPtr + 1;
                            }
                        }
                    }
                    else if (strToken.StartsWith("IFSOCIALMEMBERSHIPNONE:"))
                    {
                        string strRole = strToken.Split(char.Parse(":"))[1];
                        bool blnIsInRole = false;
                        if (objUser is object)
                        {
                            foreach (UserRoleInfo objRole in objUser.Social.Roles)
                            {
                                if ((objRole.RoleName ?? "") == (strRole ?? ""))
                                {
                                    blnIsInRole = true;
                                }
                            }
                        }

                        if (blnIsInRole == true)
                        {
                            while (iPtr < templateArray.Length - 1)
                            {
                                if ((templateArray[iPtr + 1].ToUpper() ?? "") == ("/IFSOCIALMEMBERSHIPNONE:" + strRole.ToUpper() ?? ""))
                                {
                                    break;
                                }

                                iPtr = iPtr + 1;
                            }
                        }
                    }
                    else if (strToken.StartsWith("IFISINROLE:"))
                    {
                        string strRole = strToken.Split(char.Parse(":"))[1];
                        bool blnIsInRole = false;
                        if (objUser is object)
                        {
                            blnIsInRole = objUser.IsInRole(strRole);
                        }

                        if (blnIsInRole == false)
                        {
                            while (iPtr < templateArray.Length - 1)
                            {
                                if ((templateArray[iPtr + 1].ToUpper() ?? "") == ("/IFISINROLE:" + strRole.ToUpper() ?? ""))
                                {
                                    break;
                                }

                                iPtr = iPtr + 1;
                            }
                        }
                    }
                    else if (strToken.StartsWith("IFNOTISINROLE:"))
                    {
                        string strRole = strToken.Split(char.Parse(":"))[1];
                        bool blnIsInRole = false;
                        if (objUser is object)
                        {
                            blnIsInRole = objUser.IsInRole(strRole);
                        }

                        if (blnIsInRole == true)
                        {
                            while (iPtr < templateArray.Length - 1)
                            {
                                if ((templateArray[iPtr + 1].ToUpper() ?? "") == ("/IFNOTISINROLE:" + strRole.ToUpper() ?? ""))
                                {
                                    break;
                                }

                                iPtr = iPtr + 1;
                            }
                        }
                    }
                }
            }
        }

        protected void AddPropertyValue(ref ControlCollection plhControls, ProfilePropertyDefinition ProfileProperty, UserInfo objItem)
        {
            string strType = GetPropertyType(ProfileProperty.DataType);
            switch (strType.ToLower() ?? "")
            {
                case "list":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName);
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "checkboxlist":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName);
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "country":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName);
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "date":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToDateTime(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)).ToShortDateString();
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "datetime":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToDateTime(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)).ToLongDateString();
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "integer":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName));
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "region":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName));
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "locale":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName));
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "file":
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))))
                        {
                            // add view control
                            var objLiteral = new Literal();
                            objLiteral.Text = "<a href=\"" + PortalSettings.HomeDirectory + Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)) + ">Herunterladen</a>";
                            objLiteral.EnableViewState = false;
                            plhControls.Add(objLiteral);
                        }

                        break;
                    }

                case "image":
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName))))
                        {
                            // add view control
                            var objLiteral = new Literal();
                            objLiteral.Text = "<img src=\"" + PortalSettings.HomeDirectory + Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)) + "\" alt=\"" + LocalizeProperty(ProfileProperty) + "\" />";
                            objLiteral.EnableViewState = false;
                            plhControls.Add(objLiteral);
                        }

                        break;
                    }

                case "richtext":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName));
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "timezone":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName));
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                case "truefalse":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        if (Convert.ToBoolean(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName)))
                        {
                            objLiteral.Text = "Ja";
                        }
                        else
                        {
                            objLiteral.Text = "Nein";
                        }

                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }

                default:
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem.Profile.GetPropertyValue(ProfileProperty.PropertyName));
                        objLiteral.EnableViewState = false;
                        plhControls.Add(objLiteral);
                        break;
                    }
            }
        }

        protected void AddPropertyValue(ref PlaceHolder plhControls, ProfilePropertyDefinition ProfileProperty, DataRowView objItem)
        {
            string strType = GetPropertyType(ProfileProperty.DataType);
            switch (strType.ToLower() ?? "")
            {
                case "list":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Conversions.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "checkboxlist":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Conversions.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "country":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Conversions.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "date":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToDateTime(objItem[ProfileProperty.PropertyName]).ToShortDateString();
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "datetime":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToDateTime(objItem[ProfileProperty.PropertyName]).ToLongDateString();
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "integer":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "region":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "locale":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "file":
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(objItem[ProfileProperty.PropertyName])))
                        {
                            // add view control
                            var objLiteral = new Literal();
                            objLiteral.Text = "<a href=\"" + PortalSettings.HomeDirectory + Convert.ToString(objItem[ProfileProperty.PropertyName]) + ">Herunterladen</a>";
                            objLiteral.EnableViewState = false;
                            plhControls.Controls.Add(objLiteral);
                        }

                        break;
                    }

                case "image":
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(objItem[ProfileProperty.PropertyName])))
                        {
                            // add view control
                            var objLiteral = new Literal();
                            objLiteral.Text = "<img src=\"" + PortalSettings.HomeDirectory + Convert.ToString(objItem[ProfileProperty.PropertyName]) + "\" alt=\"" + LocalizeProperty(ProfileProperty) + "\" />";
                            objLiteral.EnableViewState = false;
                            plhControls.Controls.Add(objLiteral);
                        }

                        break;
                    }

                case "richtext":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "timezone":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                case "truefalse":
                    {

                        // add view control
                        var objLiteral = new Literal();
                        if (Convert.ToBoolean(objItem[ProfileProperty.PropertyName]))
                        {
                            objLiteral.Text = "Ja";
                        }
                        else
                        {
                            objLiteral.Text = "Nein";
                        }

                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }

                default:
                    {

                        // add view control
                        var objLiteral = new Literal();
                        objLiteral.Text = Convert.ToString(objItem[ProfileProperty.PropertyName]);
                        objLiteral.EnableViewState = false;
                        plhControls.Controls.Add(objLiteral);
                        break;
                    }
            }
        }

        // Protected Sub AddVisibilityControl(ByVal ProfileAttribute As ProfilePropertyDefinition, ByRef plhControls As PlaceHolder, ByVal IsEnabled As Boolean, ByVal objUser As UserInfo)

        // Dim drp As New DotNetNuke.UI.WebControls.VisibilityControl
        // drp.User = objUser
        // drp.Value = objUser.Profile.GetProperty(ProfileAttribute.PropertyName).ProfileVisibility
        // drp.ID = plhControls.ID & "_" & Constants.ControlId_Visiblity & ProfileAttribute.PropertyDefinitionId.ToString

        // plhControls.Controls.Add(drp)

        // End Sub

        protected void AddVisibilityControl(ProfilePropertyDefinition ProfileAttribute, ref PlaceHolder plhControls, bool IsEnabled, UserInfo objUser)
        {
            var drp = new DropDownList();
            drp.ID = plhControls.ID + "_" + Constants.ControlId_Visiblity + ProfileAttribute.PropertyDefinitionId.ToString();
            drp.CssClass = "ctlProfileVisibility";
            drp.Items.Add(new ListItem(Localization.GetString("VisibilitySelect", LocalResourceFile), "-1"));
            drp.Items.Add(new ListItem(Localization.GetString("VisibilityAdminOnly", LocalResourceFile), ((int)UserVisibilityMode.AdminOnly).ToString()));
            drp.Items.Add(new ListItem(Localization.GetString("VisibilityMembersOnly", LocalResourceFile), ((int)UserVisibilityMode.MembersOnly).ToString()));
            drp.Items.Add(new ListItem(Localization.GetString("VisibilityFriendsAndGroups", LocalResourceFile), ((int)UserVisibilityMode.FriendsAndGroups).ToString()));
            drp.Items.Add(new ListItem(Localization.GetString("VisibilityAllUsers", LocalResourceFile), ((int)UserVisibilityMode.AllUsers).ToString()));
            try
            {
                var userProperty = objUser.Profile.GetProperty(ProfileAttribute.PropertyName);
                if (string.IsNullOrEmpty(userProperty.PropertyValue))
                {
                    drp.SelectedValue = ((int)ProfileAttribute.DefaultVisibility).ToString();
                }
                else
                {
                    drp.SelectedValue = ((int)userProperty.ProfileVisibility.VisibilityMode).ToString();
                }
            }
            catch
            {
            }

            plhControls.Controls.Add(drp);
        }

        protected void AddPropertyControl(ProfilePropertyDefinition ProfileAttribute, ref PlaceHolder plhControls, bool IsEnabled, UserInfo objUser)
        {
            string strType = GetPropertyType(ProfileAttribute.DataType);
            switch (strType.ToLower().Trim() ?? "")
            {
                case "list":
                    {
                        var drp = new DropDownList();
                        drp.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        drp.Attributes.Add("ParentId", plhControls.ID);
                        var lc = new DotNetNuke.Common.Lists.ListController();
                        drp.DataTextField = "Text";
                        drp.DataValueField = "Value";
                        drp.DataSource = lc.GetListEntryInfoItems(ProfileAttribute.PropertyName);
                        drp.DataBind();
                        try
                        {
                            drp.SelectedValue = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName);
                        }
                        catch
                        {
                        }

                        drp.Enabled = IsEnabled;
                        // drp.EnableAjaxSkinRendering = True
                        plhControls.Controls.Add(drp);
                        break;
                    }

                case "checkboxlist":
                    {
                        var chklist = new CheckBoxList();
                        chklist.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        chklist.Attributes.Add("ParentId", plhControls.ID);
                        var lc = new DotNetNuke.Common.Lists.ListController();
                        chklist.DataTextField = "Text";
                        chklist.DataValueField = "Value";
                        chklist.DataSource = lc.GetListEntryInfoItems(ProfileAttribute.PropertyName);
                        chklist.DataBind();
                        try
                        {
                            var values = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName).Split('|');
                            foreach (string item in values)
                            {
                                if (chklist.Items.FindByValue(item) is object)
                                {
                                    chklist.Items.FindByValue(item).Selected = true;
                                }
                            }

                            chklist.SelectedValue = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName);
                        }
                        catch
                        {
                        }

                        chklist.Enabled = IsEnabled;
                        plhControls.Controls.Add(chklist);
                        break;
                    }

                case "country":
                    {
                        var ctl = new DropDownList();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctl.Attributes.Add("ParentId", plhControls.ID);
                        var lc = new DotNetNuke.Common.Lists.ListController();
                        var entries = lc.GetListEntryInfoItems("Country");
                        foreach (var ListEntryInfo in entries)
                            ctl.Items.Add(new ListItem(ListEntryInfo.Text, ListEntryInfo.Value));
                        try
                        {
                            ctl.Items.FindByText(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)).Selected = true;
                        }
                        catch
                        {
                            ctl.Items[0].Selected = true;
                        }

                        ctl.Enabled = IsEnabled;
                        ctl.AutoPostBack = true;
                        ctl.SelectedIndexChanged += drpCountry_SelectedIndexChanged;
                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "region":
                    {
                        var ctlDrop = new DropDownList();
                        ctlDrop.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_DropdownSuffix + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctlDrop.Attributes.Add("ParentId", plhControls.ID);
                        // ctlDrop.EnableAjaxSkinRendering = True
                        ctlDrop.Enabled = IsEnabled;
                        ctlDrop.Visible = false;
                        var ctlText = new TextBox();
                        ctlText.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_TextSuffix + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctlText.Enabled = IsEnabled;
                        ctlText.Attributes.Add("ParentId", plhControls.ID);
                        ctlText.Visible = false;
                        DropDownList drpCountry = null;
                        string strCountry = "";
                        var propCountry = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Country");
                        if (propCountry is object)
                        {
                            var obj = FindControlRecursive(plhControls, plhControls.ID + "_" + Constants.ControlId_ProfileProperty + propCountry.PropertyDefinitionId.ToString());
                            if (obj is object)
                            {
                                drpCountry = (DropDownList)obj;
                                if (drpCountry is object)
                                {
                                    strCountry = drpCountry.SelectedItem.Text;
                                }
                            }
                        }

                        DotNetNuke.Common.Lists.ListEntryInfo country = null;
                        var lc = new DotNetNuke.Common.Lists.ListController();
                        IEnumerable<DotNetNuke.Common.Lists.ListEntryInfo> entries = null;
                        var countries = lc.GetListEntryInfoItems("Country");
                        if (countries is object)
                        {
                            foreach (DotNetNuke.Common.Lists.ListEntryInfo checkCountry in countries)
                            {
                                if ((checkCountry.Text ?? "") == (strCountry ?? ""))
                                {
                                    country = checkCountry;
                                    break;
                                }
                            }
                        }

                        if (country is object)
                        {
                            entries = lc.GetListEntryInfoItems("Region", "Country." + country.Value);
                        }

                        bool blnHasEntries = false;
                        if (entries is object)
                        {
                            foreach (DotNetNuke.Common.Lists.ListEntryInfo entry in entries)
                            {
                                ctlDrop.Items.Add(new ListItem(entry.Text, entry.Value));
                                blnHasEntries = true;
                            }
                        }

                        try
                        {
                            ctlDrop.Items.FindByText(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName)).Selected = true;
                        }
                        catch
                        {
                        }

                        ctlDrop.Visible = true;
                        ctlText.Visible = false;
                        if (blnHasEntries == false)
                        {
                            try
                            {
                                ctlText.Text = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                            }
                            catch
                            {
                            }

                            ctlText.Visible = true;
                            ctlDrop.Visible = false;
                        }

                        plhControls.Controls.Add(ctlDrop);
                        plhControls.Controls.Add(ctlText);
                        break;
                    }

                case "date":
                    {
                        var ctl = new RadDatePicker();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctl.MinDate = new DateTime(1900, 1, 1);
                        ctl.MaxDate = new DateTime(2100, 12, 31);
                        try
                        {
                            ctl.SelectedDate = Convert.ToDateTime(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                        }
                        catch
                        {
                        }

                        ctl.Enabled = IsEnabled;
                        ctl.EnableAjaxSkinRendering = true;
                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "datetime":
                    {
                        var ctl = new RadDateTimePicker();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctl.MinDate = new DateTime(1900, 1, 1);
                        ctl.MaxDate = new DateTime(2100, 12, 31);
                        try
                        {
                            ctl.SelectedDate = Convert.ToDateTime(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                        }
                        catch
                        {
                        }

                        ctl.Enabled = IsEnabled;
                        ctl.EnableAjaxSkinRendering = true;
                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "integer":
                    {
                        var ctl = new RadNumericTextBox();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        try
                        {
                            ctl.Value = Convert.ToDouble(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                        }
                        catch
                        {
                        }

                        ctl.Enabled = IsEnabled;
                        ctl.EnableAjaxSkinRendering = true;
                        ctl.MaxLength = ProfileAttribute.Length;
                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "locale":
                    {
                        var ctl = new DropDownList();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctl.Page = Page;
                        ctl.Enabled = IsEnabled;
                        ctl.DataValueField = "Name";
                        ctl.DataTextField = "NativeName";
                        ctl.DataSource = DotNetNuke.ComponentModel.ComponentBase<ILocaleController, LocaleController>.Instance.GetCultures(DotNetNuke.ComponentModel.ComponentBase<ILocaleController, LocaleController>.Instance.GetLocales(PortalId));
                        ctl.DataBind();
                        try
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))))
                            {
                                ctl.SelectedValue = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                            }
                        }
                        catch
                        {
                        }

                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "image":
                    {
                        var ctl = new DnnImageEditControl();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctl.User = objUser;
                        if (IsEnabled)
                        {
                            ctl.EditMode = PropertyEditorMode.Edit;
                        }
                        else
                        {
                            ctl.EditMode = PropertyEditorMode.View;
                        }

                        try
                        {
                            ctl.Value = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName);
                        }
                        catch
                        {
                        }

                        ctl.DataBind();
                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "file":
                    {
                        var ctl = new DnnFileEditControl();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        ctl.User = objUser;
                        if (IsEnabled)
                        {
                            ctl.EditMode = PropertyEditorMode.Edit;
                        }
                        else
                        {
                            ctl.EditMode = PropertyEditorMode.View;
                        }

                        try
                        {
                            ctl.Value = objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName);
                        }
                        catch
                        {
                        }

                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "richtext":
                case "multi-line text":
                    {
                        var ctl = new TextBox();
                        ctl.TextMode = (TextBoxMode)InputMode.MultiLine;
                        ctl.Rows = 8;
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        try
                        {
                            ctl.Text = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                        }
                        catch
                        {
                        }

                        ctl.Enabled = IsEnabled;
                        ctl.MaxLength = ProfileAttribute.Length;
                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "timezone":
                case "timezoneinfo":
                    {
                        var ctl = new DnnTimeZoneComboBox();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        try
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName))))
                            {
                                ctl.SelectedValue = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                            }
                        }
                        catch
                        {
                        }

                        ctl.Enabled = IsEnabled;
                        plhControls.Controls.Add(ctl);
                        break;
                    }

                case "truefalse":
                case "checkbox":
                    {
                        var ctl = new CheckBox();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        try
                        {
                            ctl.Checked = Convert.ToBoolean(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                        }
                        catch
                        {
                        }

                        plhControls.Controls.Add(ctl);
                        break;
                    }

                default:
                    {
                        var ctl = new TextBox();
                        ctl.ID = plhControls.ID + "_" + Constants.ControlId_ProfileProperty + ProfileAttribute.PropertyDefinitionId.ToString();
                        try
                        {
                            ctl.Text = Convert.ToString(objUser.Profile.GetPropertyValue(ProfileAttribute.PropertyName));
                        }
                        catch
                        {
                        }

                        ctl.Enabled = IsEnabled;
                        ctl.MaxLength = ProfileAttribute.Length;
                        plhControls.Controls.Add(ctl);
                        break;
                    }
            }
        }

        public void UpdateProfileProperties(ref Control Container, ref UserInfo oUser, ref ProfilePropertyDefinitionCollection propertiesCollection, List<string> Properties)
        {
            string strUpdated = "";
            UpdateProfileProperties(ref Container, ref oUser, ref propertiesCollection, ref strUpdated, Properties);
        }

        private UserVisibilityMode GetVisibilityMode(ProfilePropertyDefinition ProfProperty, ref Control objControl)
        {
            DropDownList ctlDrop = (DropDownList)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_Visiblity + ProfProperty.PropertyDefinitionId.ToString());
            if (ctlDrop is object)
            {
                switch (ctlDrop.SelectedValue ?? "")
                {
                    case "2":
                        {
                            return UserVisibilityMode.AdminOnly;
                        }

                    case "0":
                        {
                            return UserVisibilityMode.AllUsers;
                        }

                    case "3":
                        {
                            return UserVisibilityMode.FriendsAndGroups;
                        }

                    case "1":
                        {
                            return UserVisibilityMode.MembersOnly;
                        }

                    default:
                        {
                            return ProfProperty.DefaultVisibility;
                        }
                }
            }

            return ProfProperty.DefaultVisibility;
        }

        public void UpdateProfileProperties(ref Control Container, ref UserInfo oUser, ref ProfilePropertyDefinitionCollection propertiesCollection, ref string strUpdated, List<string> Properties)
        {
            var oldAccount = oUser;

            // loop trough dynamic profile attributes and set those
            foreach (string itemProp in Properties)
            {
                try
                {
                    var prop = ProfileController.GetPropertyDefinitionByName(PortalId, itemProp.Substring(2));
                    if (prop is object)
                    {
                        var ctl = GetPropertyControl(prop, ref Container);
                        if (ctl is object)
                        {
                            if (ctl is DropDownList)
                            {
                                string value = ((DropDownList)ctl).SelectedValue.Trim();
                                if (prop.PropertyName.ToLower() == "region")
                                {
                                    value = ((DropDownList)ctl).SelectedItem.Text.Trim();
                                }

                                if (prop.PropertyName.ToLower() == "country")
                                {
                                    value = ((DropDownList)ctl).SelectedItem.Text.Trim();
                                }

                                if ((oldAccount.Profile.GetPropertyValue(prop.PropertyName) ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is CheckBoxList)
                            {
                                CheckBoxList chklist = (CheckBoxList)ctl;
                                string value = "";
                                foreach (ListItem chk in chklist.Items)
                                {
                                    if (chk.Selected)
                                    {
                                        value += "|" + chk.Value;
                                    }
                                }

                                if (!string.IsNullOrEmpty(value))
                                    value = value.Substring(1);
                                if ((oldAccount.Profile.GetPropertyValue(prop.PropertyName) ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is RadDateTimePicker)
                            {
                                string value = ((RadDateTimePicker)ctl).DbSelectedDate.ToString();
                                if ((oldAccount.Profile.GetPropertyValue(prop.PropertyName) ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is RadTimePicker)
                            {
                                string value = ((RadTimePicker)ctl).DbSelectedDate.ToString().Trim();
                                if ((oldAccount.Profile.GetPropertyValue(prop.PropertyName) ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is RadDatePicker)
                            {
                                string value = ((RadDatePicker)ctl).DateInput.DbSelectedDate.ToString().Trim();
                                if ((oldAccount.Profile.GetPropertyValue(prop.PropertyName) ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is CheckBox)
                            {
                                string value = ((CheckBox)ctl).Checked.ToString();
                                if ((oldAccount.Profile.GetPropertyValue(prop.PropertyName) ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is TextBox)
                            {
                                string value = ((TextBox)ctl).Text.Trim();
                                string oldValue = oldAccount.Profile.GetPropertyValue(prop.PropertyName);
                                if ((oldValue ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is RadNumericTextBox)
                            {
                                string value = ((RadNumericTextBox)ctl).Value.ToString();
                                if ((oldAccount.Profile.GetPropertyValue(prop.PropertyName) ?? "") != (value ?? ""))
                                {
                                    string strProperty = prop.PropertyName;
                                    if (!string.IsNullOrEmpty(Localization.GetString("ProfileProperties_" + prop.PropertyName, ProfileResourcefile)))
                                    {
                                        strProperty = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
                                    }

                                    strUpdated += strProperty + ", ";
                                }

                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is DnnTimeZoneComboBox)
                            {
                                string value = ((DnnTimeZoneComboBox)ctl).SelectedValue;
                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is DnnImageEditControl)
                            {
                                string value = Conversions.ToString(((DnnImageEditControl)ctl).Value);
                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                            else if (ctl is DnnFileEditControl)
                            {
                                string value = Conversions.ToString(((DnnFileEditControl)ctl).Value);
                                prop = oUser.Profile.GetProperty(prop.PropertyName);
                                prop.PropertyValue = value;
                                var objVisibility = new ProfileVisibility();
                                objVisibility.VisibilityMode = GetVisibilityMode(prop, ref Container);
                                prop.ProfileVisibility = objVisibility;
                                propertiesCollection.Add(prop);
                            }
                        }
                    }
                }
                catch
                {
                }
            }
        }

        // Public Sub UpdateProfileProperties(ByRef Container As Control, ByRef oUser As UserInfo, ByRef strUpdated As String, Properties As List(Of String))

        // Dim oldAccount As UserInfo = oUser

        // Dim propertiesCollection As New ProfilePropertyDefinitionCollection


        // 'loop trough dynamic profile attributes and set those
        // For Each itemProp As String In Properties
        // Try
        // Dim prop As ProfilePropertyDefinition = ProfileController.GetPropertyDefinitionByName(PortalId, itemProp.Substring(2))
        // If Not prop Is Nothing Then

        // Dim ctl As Control = GetPropertyControl(prop, Container)
        // If Not ctl Is Nothing Then
        // If TypeOf (ctl) Is DropDownList Then

        // Dim value As String = CType(ctl, DropDownList).SelectedValue.Trim


        // If prop.PropertyName.ToLower = "region" Then
        // value = CType(ctl, DropDownList).SelectedItem.Text.Trim
        // End If
        // If prop.PropertyName.ToLower = "country" Then
        // value = CType(ctl, DropDownList).SelectedItem.Text.Trim
        // End If

        // If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        // Dim strProperty As String = prop.PropertyName
        // If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        // strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        // End If
        // strUpdated += strProperty & ", "
        // End If

        // oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        // ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDateTimePicker Then

        // Dim value As String = CType(ctl, Telerik.Web.UI.RadDateTimePicker).DbSelectedDate.ToString

        // If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        // Dim strProperty As String = prop.PropertyName
        // If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        // strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        // End If
        // strUpdated += strProperty & ", "
        // End If

        // oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        // ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadTimePicker Then

        // Dim value As String = CType(ctl, Telerik.Web.UI.RadTimePicker).DbSelectedDate.ToString.Trim

        // If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        // Dim strProperty As String = prop.PropertyName
        // If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        // strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        // End If
        // strUpdated += strProperty & ", "
        // End If

        // oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        // ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadDatePicker Then

        // Dim value As String = CType(ctl, Telerik.Web.UI.RadDatePicker).DateInput.DbSelectedDate.ToString.Trim

        // If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        // Dim strProperty As String = prop.PropertyName
        // If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        // strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        // End If
        // strUpdated += strProperty & ", "
        // End If

        // oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        // ElseIf TypeOf (ctl) Is CheckBox Then

        // Dim value As String = CType(ctl, CheckBox).Checked.ToString

        // If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        // Dim strProperty As String = prop.PropertyName
        // If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        // strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        // End If
        // strUpdated += strProperty & ", "
        // End If

        // oUser.Profile.SetProfileProperty(prop.PropertyName, value)


        // ElseIf TypeOf (ctl) Is TextBox Then

        // Dim value As String = CType(ctl, TextBox).Text.Trim

        // Dim oldValue As String = oldAccount.Profile.GetPropertyValue(prop.PropertyName)
        // If oldValue <> value Then
        // Dim strProperty As String = prop.PropertyName
        // If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        // strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        // End If
        // strUpdated += strProperty & ", "
        // End If

        // oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        // ElseIf TypeOf (ctl) Is Telerik.Web.UI.RadNumericTextBox Then

        // Dim value As String = CType(ctl, Telerik.Web.UI.RadNumericTextBox).Value.ToString

        // If oldAccount.Profile.GetPropertyValue(prop.PropertyName) <> value Then
        // Dim strProperty As String = prop.PropertyName
        // If Localization.GetString("ProfileProperties_" & prop.PropertyName, ProfileResourcefile) <> "" Then
        // strProperty = Localization.GetString("ProfileProperties_" & prop.PropertyName & ".Text", ProfileResourcefile)
        // End If
        // strUpdated += strProperty & ", "
        // End If

        // oUser.Profile.SetProfileProperty(prop.PropertyName, value)

        // ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnTimeZoneComboBox Then
        // oUser.Profile.SetProfileProperty(prop.PropertyName, CType(ctl, DotNetNuke.Web.UI.WebControls.DnnTimeZoneComboBox).SelectedValue)

        // ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnImageEditControl Then
        // oUser.Profile.SetProfileProperty(prop.PropertyName, CType(ctl, DotNetNuke.Web.UI.WebControls.DnnImageEditControl).Value)

        // ElseIf TypeOf (ctl) Is DotNetNuke.Web.UI.WebControls.DnnFileEditControl Then
        // oUser.Profile.SetProfileProperty(prop.PropertyName, CType(ctl, DotNetNuke.Web.UI.WebControls.DnnFileEditControl).Value)

        // End If
        // End If

        // End If
        // Catch
        // End Try
        // Next

        // End Sub

        public void ManageCountryDropdown(ref Control Container)
        {
        }

        public void ManageRegionLabel(ref Control Container)
        {

            // we need to check for double labels in region control, if that is on the page

            Control ctlRegionDrop = null;
            Control ctlRegionText = null;
            var propRegion = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Region");
            if (propRegion is object)
            {
                ctlRegionDrop = FindControlRecursive(Page, Container.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_DropdownSuffix + propRegion.PropertyDefinitionId.ToString());
                ctlRegionText = FindControlRecursive(Page, Container.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_TextSuffix + propRegion.PropertyDefinitionId.ToString());
            }

            Control objControlForDropdown = null;
            DotNetNuke.UI.UserControls.LabelControl objLabelForDropdown = null;
            string lblDropdownId = Container.ID + "_RESX_PROFILE" + Constants.ControlId_DropdownSuffix + "_" + propRegion.PropertyName;
            objControlForDropdown = FindControlRecursive(Container, lblDropdownId);
            if (objControlForDropdown is object)
            {
                if (objControlForDropdown is DotNetNuke.UI.UserControls.LabelControl)
                {
                    objLabelForDropdown = (DotNetNuke.UI.UserControls.LabelControl)objControlForDropdown;
                }
            }

            Control objControlForTextbox = null;
            DotNetNuke.UI.UserControls.LabelControl objLabelForTextbox = null;
            string lblTextboxId = Container.ID + "_RESX_PROFILE" + Constants.ControlId_TextSuffix + "_" + propRegion.PropertyName;
            objControlForTextbox = FindControlRecursive(Container, lblTextboxId);
            if (objControlForTextbox is object)
            {
                if (objControlForTextbox is DotNetNuke.UI.UserControls.LabelControl)
                {
                    objLabelForTextbox = (DotNetNuke.UI.UserControls.LabelControl)objControlForTextbox;
                }
            }

            if (ctlRegionDrop is object)
            {
                if (ctlRegionDrop.Visible == true)
                {
                    if (objLabelForDropdown is object)
                        objLabelForDropdown.Visible = true;
                    if (objLabelForTextbox is object)
                        objLabelForTextbox.Visible = false;
                }
                else
                {
                    if (objLabelForDropdown is object)
                        objLabelForDropdown.Visible = false;
                    if (objLabelForTextbox is object)
                        objLabelForTextbox.Visible = true;
                }
            }

            if (ctlRegionText is object)
            {
                if (ctlRegionText.Visible == true)
                {
                    if (objLabelForDropdown is object)
                        objLabelForDropdown.Visible = false;
                    if (objLabelForTextbox is object)
                        objLabelForTextbox.Visible = true;
                }
                else
                {
                    if (objLabelForDropdown is object)
                        objLabelForDropdown.Visible = true;
                    if (objLabelForTextbox is object)
                        objLabelForTextbox.Visible = false;
                }
            }

            if (ctlRegionDrop is null && ctlRegionText is null)
            {
                var propCountry = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Country");
                if (propCountry is object)
                {
                    var ctlDropCountry = FindControlRecursive(Page, Container.ID + "_" + Constants.ControlId_ProfileProperty + propCountry.PropertyDefinitionId.ToString());
                    if (ctlDropCountry is object)
                    {
                        ((DropDownList)ctlDropCountry).AutoPostBack = false;
                    }
                }
            }
        }

        protected void drpCountry_SelectedIndexChanged(object o, EventArgs e)
        {
            DropDownList drpCountry = (DropDownList)o;
            string objParent = drpCountry.Attributes["ParentId"];
            string strCountry = drpCountry.Text;
            DotNetNuke.Common.Lists.ListEntryInfo country = null;
            var lc = new DotNetNuke.Common.Lists.ListController();
            IEnumerable<DotNetNuke.Common.Lists.ListEntryInfo> entries = null;
            var countries = lc.GetListEntryInfoItems("Country");
            foreach (DotNetNuke.Common.Lists.ListEntryInfo checkCountry in countries)
            {
                if ((checkCountry.Text ?? "") == (strCountry ?? ""))
                {
                    country = checkCountry;
                    break;
                }
            }

            if (country is object)
            {
                entries = lc.GetListEntryInfoItems("Region", "Country." + country.Value);
            }

            bool blnHasEntries = false;
            Control ctlRegionDrop = null;
            Control ctlRegionText = null;
            var propRegion = ProfileController.GetPropertyDefinitionByName(PortalSettings.PortalId, "Region");
            if (propRegion is object)
            {
                ctlRegionDrop = FindControlRecursive(Page, objParent + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_DropdownSuffix + propRegion.PropertyDefinitionId.ToString());
                ctlRegionText = FindControlRecursive(Page, objParent + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_TextSuffix + propRegion.PropertyDefinitionId.ToString());
            }

            if (ctlRegionDrop is object && entries is object)
            {
                ctlRegionDrop.Visible = true;
                ((DropDownList)ctlRegionDrop).Items.Clear();
                foreach (DotNetNuke.Common.Lists.ListEntryInfo entry in entries)
                {
                    ((DropDownList)ctlRegionDrop).Items.Add(new ListItem(entry.Text, entry.Value));
                    blnHasEntries = true;
                }
            }

            if (ctlRegionText is object)
            {
                ctlRegionText.Visible = false;
            }

            if (blnHasEntries == false)
            {
                if (ctlRegionDrop is object)
                {
                    ctlRegionDrop.Visible = false;
                }

                if (ctlRegionText is object)
                {
                    ctlRegionText.Visible = true;
                }
            }
        }

        protected Control GetPropertyControl(ProfilePropertyDefinition ProfProperty, ref Control objControl)
        {
            string strType = GetPropertyType(ProfProperty.DataType);
            switch (strType.ToLower() ?? "")
            {
                case "region":
                    {
                        DropDownList ctlDrop = (DropDownList)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_DropdownSuffix + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctlDrop is object)
                        {
                            if (ctlDrop.Visible)
                            {
                                return ctlDrop;
                            }
                        }

                        TextBox ctlText = (TextBox)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + Constants.ControlId_TextSuffix + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctlText is object)
                        {
                            return ctlText;
                        }

                        break;
                    }

                case "list":
                case "country":
                case "locale":
                    {
                        DropDownList ctl = (DropDownList)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "checkboxlist":
                    {
                        CheckBoxList ctl = (CheckBoxList)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "timezone":
                case "timezoneinfo":
                    {
                        DnnTimeZoneComboBox ctl = (DnnTimeZoneComboBox)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "integer":
                    {
                        RadNumericTextBox ctl = (RadNumericTextBox)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "richtext":
                case "multi-line text":
                    {
                        TextBox ctl = (TextBox)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "truefalse":
                case "checkbox":
                    {
                        CheckBox ctl = (CheckBox)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "date":
                    {
                        RadDatePicker ctl = (RadDatePicker)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "datetime":
                    {
                        RadDateTimePicker ctl = (RadDateTimePicker)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "image":
                    {
                        DnnImageEditControl ctl = (DnnImageEditControl)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                case "file":
                    {
                        DnnFileEditControl ctl = (DnnFileEditControl)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }

                default:
                    {
                        TextBox ctl = (TextBox)objControl.FindControl(objControl.ID + "_" + Constants.ControlId_ProfileProperty + ProfProperty.PropertyDefinitionId.ToString());
                        if (ctl is object)
                        {
                            return ctl;
                        }

                        break;
                    }
            }

            return null;
        }

        protected void AddSuccessIndicator(string Attribute, ref Control objControl)
        {
            Panel pnlRequired = (Panel)FindControlRecursive(objControl, objControl.ID + "_" + Constants.ControlId_PanelRequired + Attribute);
            if (pnlRequired is object)
            {
                pnlRequired.CssClass = Constants.CssClass_SuccessPanel;
            }

            // Dim pnlError As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelError & Attribute), Panel)
            // If Not pnlError Is Nothing Then
            // pnlError.Visible = False
            // End If

            // Dim pnlSucess As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelSuccess & Attribute), Panel)
            // If Not pnlSucess Is Nothing Then
            // pnlSucess.Visible = True
            // End If

        }

        protected void AddErrorIndicator(string Attribute, ref Control objControl)
        {
            Panel pnlRequired = (Panel)FindControlRecursive(objControl, objControl.ID + "_" + Constants.ControlId_PanelRequired + Attribute);
            if (pnlRequired is object)
            {
                pnlRequired.CssClass = Constants.CssClass_ErrorPanel;
            }

            // Dim pnlError As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelError & Attribute), Panel)
            // If Not pnlError Is Nothing Then
            // pnlError.Visible = True
            // End If

            // Dim pnlSucess As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelSuccess & Attribute), Panel)
            // If Not pnlSucess Is Nothing Then
            // pnlSucess.Visible = False
            // End If

        }

        protected void RemoveErrorIndicator(string Attribute, ref Control objControl, bool IsRequired)
        {
            Panel pnlRequired = (Panel)FindControlRecursive(objControl, objControl.ID + "_" + Constants.ControlId_PanelRequired + Attribute);
            if (pnlRequired is object)
            {
                pnlRequired.CssClass = Constants.CssClass_RequiredPanel;
            }

            // Dim pnlError As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelError & Attribute), Panel)
            // If Not pnlError Is Nothing Then
            // pnlError.Visible = False
            // End If

            // Dim pnlSucess As Panel = CType(FindControlRecursive(objControl, objControl.ID & "_" & Constants.ControlId_PanelSuccess & Attribute), Panel)
            // If Not pnlSucess Is Nothing Then
            // pnlSucess.Visible = False
            // End If

        }

        protected List<string> GetPropertiesFromTempate(string Template)
        {
            var lstProperties = new List<string>();
            string delimStr = "[]";
            var delimiter = delimStr.ToCharArray();
            string[] templateArray;
            templateArray = Template.Split(delimiter);
            for (int iPtr = 0, loopTo = templateArray.Length - 1; iPtr <= loopTo; iPtr += 2)
            {
                if (iPtr < templateArray.Length - 1)
                {
                    string strToken = templateArray[iPtr + 1];
                    if (strToken.StartsWith("CTL:"))
                    {
                        string strControlToken = "";
                        try
                        {
                            strControlToken = strToken.Substring(4, strToken.Length - 4);
                        }
                        catch
                        {
                        }

                        string strType = "";
                        try
                        {
                            strType = strControlToken.Substring(0, strControlToken.IndexOf(":"));
                        }
                        catch
                        {
                        }

                        string strProperty = "";
                        try
                        {
                            strProperty = strControlToken.Substring(strControlToken.IndexOf(":") + 1);
                        }
                        catch
                        {
                        }

                        if (strType.ToUpper() == "PROFILE")
                        {
                            lstProperties.Add("P:" + strProperty);
                        }
                        else if (strType.ToUpper() == "USER")
                        {
                            lstProperties.Add("U:" + strProperty);
                        }
                    }
                }
            }

            return lstProperties;
        }

        public string GetTempFolderPath(string PropertyName)
        {
            string strPath = ResolveUrl("~/App_Data/dnnWerk.Users/");
            if (!System.IO.Directory.Exists(Server.MapPath(strPath)))
            {
                System.IO.Directory.CreateDirectory(Server.MapPath(strPath));
            }

            strPath = ResolveUrl("~/App_Data/dnnWerk.Users/" + PropertyName);
            if (!System.IO.Directory.Exists(Server.MapPath(strPath)))
            {
                System.IO.Directory.CreateDirectory(Server.MapPath(strPath));
            }

            return strPath + "/";
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        protected string LocalizeProperty(ProfilePropertyDefinition prop)
        {
            string strText = prop.PropertyName;
            try
            {
                strText = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Text", ProfileResourcefile);
            }
            catch
            {
            }

            return strText;
        }

        protected string LocalizePropertyHelp(ProfilePropertyDefinition prop)
        {
            string strText = prop.PropertyName;
            try
            {
                strText = Localization.GetString("ProfileProperties_" + prop.PropertyName + ".Help", ProfileResourcefile);
            }
            catch
            {
            }

            return strText;
        }

        protected string LocalizePropertyCategory(ProfilePropertyDefinition prop)
        {
            string strText = prop.PropertyCategory;
            try
            {
                strText = Localization.GetString("ProfileProperties_" + prop.PropertyCategory + ".Header", ProfileResourcefile);
            }
            catch
            {
            }

            return strText;
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }
}